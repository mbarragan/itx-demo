swagger: '2.0'
info:
  title: itx-demo
  version: 1.0.0
  description: Demo for ITX API (Swagger)
consumes:
  - application/json
produces:
  - application/json
paths:
  /fare:
    get:
      responses:
        '200':
          description: get all fares or the empty list if no fares
          schema:
            type: array
            items:
              $ref: '#/definitions/Fare'
          examples:
            application/json:
              -
                id: 83
                productId: 71
                startDate: '2018-02-10T09:30Z'
                endDate: '2018-02-10T09:30Z'
                brandId: 16
                price: 82.96
                priority: 86
                currency: some text
              -
                id: 45
                productId: 91
                startDate: '2018-02-10T09:30Z'
                endDate: '2018-02-10T09:30Z'
                brandId: 49
                price: 55.2
                priority: 14
                currency: some text
      summary: Get all fares
      description: Get all fares
    post:
      parameters:
        -
          name: body
          description: the fare payload
          schema:
            $ref: '#/definitions/FareModel'
          in: body
          required: true
      responses:
        '200':
          description: ' 200_OK'
          schema:
            $ref: '#/definitions/FareModel'
          examples:
            application/json:
              id: 2
              productId: 35455
              startDate: '2019-07-16T16:55:42.000Z'
              endDate: '2019-07-16T16:55:42.000Z'
              brandId: 1
              price: 35.05
        '404':
          description: FARE NOT FOUND
          examples:
            application/json:
              timestamp: '2021-09-17T12:09:21.368+00:00'
              status: 404
              error: Not Found
              message: ''
              path: /fare
      summary: get fare
      description: get the valid fare according to the business rules
  '/fare/{id}':
    get:
      responses:
        '200':
          description: the fareModel object
          schema:
            $ref: '#/definitions/FareModel'
          examples:
            application/json:
              id: 1
              productId: 35455
              startDate: '2020-06-14T00:00:00'
              endDate: '2020-12-31T23:59:59'
              brandId: 1
              price: 35.5
        '404':
          description: FARE NOT FOUND
          examples:
            application/json:
              timestamp: '2022-06-06T17:14:19.163+00:00'
              status: 404
              error: Not Found
              message: ''
              path: /fare/100
      summary: get by id
      description: get a fare by id
    parameters:
      -
        name: id
        description: the fare id
        in: path
        required: true
        type: integer
        format: int64
definitions:
  Fare:
    description: the fare entity
    type: object
    properties:
      id:
        format: int64
        description: id of the fare
        type: integer
      productId:
        format: int32
        description: the id of the product
        type: integer
      startDate:
        format: date-time
        description: beginning of the fare
        type: string
      endDate:
        format: date-time
        description: 'end of the fare '
        type: string
      brandId:
        format: int32
        description: the brand id
        type: integer
      price:
        format: double
        description: the fare value
        type: number
      priority:
        format: int32
        description: the priority order
        type: integer
      currency:
        description: the currency ISO value
        maxLength: 3
        minLength: 3
        type: string
    example:
      id: 2
      productId: 35455
      startDate: '2019-07-16T16:55:42.000Z'
      endDate: '2019-07-16T16:55:42.000Z'
      brandId: 1
      price: 35.05
      priority: 0
      currency: EUR
  FareModel:
    title: Root Type for PriceModel
    description: Payload to interact with price services
    required:
      - productId
      - brandId
      - startDate
    type: object
    properties:
      id:
        format: int64
        description: id of the fare
        type: integer
      productId:
        format: int32
        description: the id of the product
        type: integer
      startDate:
        format: date-time
        description: beginning of the fare
        type: string
      endDate:
        format: date-time
        description: 'end of the fare '
        type: string
      brandId:
        format: int32
        description: the brand id
        type: integer
      price:
        format: double
        description: the fare value
        type: number
    example:
      id: 1
      productId: 35455
      startDate: '2020-06-14T00:00:00'
      endDate: '2020-12-31T23:59:59'
      brandId: 1
      price: 35.5
